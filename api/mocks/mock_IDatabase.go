// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/golang-project-pattern/api/interfaces (interfaces: IDatabase)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/golang-project-pattern/api/model"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIDatabase is a mock of IDatabase interface.
type MockIDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockIDatabaseMockRecorder
}

// MockIDatabaseMockRecorder is the mock recorder for MockIDatabase.
type MockIDatabaseMockRecorder struct {
	mock *MockIDatabase
}

// NewMockIDatabase creates a new mock instance.
func NewMockIDatabase(ctrl *gomock.Controller) *MockIDatabase {
	mock := &MockIDatabase{ctrl: ctrl}
	mock.recorder = &MockIDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatabase) EXPECT() *MockIDatabaseMockRecorder {
	return m.recorder
}

// CountStudents mocks base method.
func (m *MockIDatabase) CountStudents(arg0 primitive.D) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountStudents", arg0)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountStudents indicates an expected call of CountStudents.
func (mr *MockIDatabaseMockRecorder) CountStudents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountStudents", reflect.TypeOf((*MockIDatabase)(nil).CountStudents), arg0)
}

// DeleteOneById mocks base method.
func (m *MockIDatabase) DeleteOneById(arg0 string) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneById", arg0)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOneById indicates an expected call of DeleteOneById.
func (mr *MockIDatabaseMockRecorder) DeleteOneById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneById", reflect.TypeOf((*MockIDatabase)(nil).DeleteOneById), arg0)
}

// FindAllStudents mocks base method.
func (m *MockIDatabase) FindAllStudents() (*mongo.Cursor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllStudents")
	ret0, _ := ret[0].(*mongo.Cursor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllStudents indicates an expected call of FindAllStudents.
func (mr *MockIDatabaseMockRecorder) FindAllStudents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllStudents", reflect.TypeOf((*MockIDatabase)(nil).FindAllStudents))
}

// FindOneById mocks base method.
func (m *MockIDatabase) FindOneById(arg0 string) *mongo.SingleResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneById", arg0)
	ret0, _ := ret[0].(*mongo.SingleResult)
	return ret0
}

// FindOneById indicates an expected call of FindOneById.
func (mr *MockIDatabaseMockRecorder) FindOneById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneById", reflect.TypeOf((*MockIDatabase)(nil).FindOneById), arg0)
}

// InsertStudent mocks base method.
func (m *MockIDatabase) InsertStudent(arg0 model.Student, arg1 *options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStudent", arg0, arg1)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertStudent indicates an expected call of InsertStudent.
func (mr *MockIDatabaseMockRecorder) InsertStudent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStudent", reflect.TypeOf((*MockIDatabase)(nil).InsertStudent), arg0, arg1)
}

// UpdateStudentById mocks base method.
func (m *MockIDatabase) UpdateStudentById(arg0 string, arg1 primitive.D) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateStudentById", arg0, arg1)
}

// UpdateStudentById indicates an expected call of UpdateStudentById.
func (mr *MockIDatabaseMockRecorder) UpdateStudentById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStudentById", reflect.TypeOf((*MockIDatabase)(nil).UpdateStudentById), arg0, arg1)
}
